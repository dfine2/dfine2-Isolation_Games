{"version":3,"sources":["gameState.js","components/TurnActions.js","components/Scores.js","components/RoleButtons.js","components/Card.js","components/Board.js","components/App.js","index.js"],"names":["socket","openSocket","GameState","createContext","GameDispatch","initialState","key","cards","deck","blueCards","redCards","turn","useGameState","useContext","useGameDispatch","GameProvider","children","useState","localState","setLocalState","view","setView","on","gameState","Provider","value","flipCard","word","emit","startNewGame","endTurn","Container","styled","div","StyledButton","button","TurnActions","onClick","ScoreCard","color","Scores","RoleButton","isSelected","RoleButtons","StyledCard","card","revealed","Card","Grid","Board","words","length","i","push","TopBar","App","style","display","flexDirection","alignItems","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fcf28ba.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'\nimport React, {createContext, useState, useContext, useEffect} from 'react'\n\n\nconst endpoint = \"https://0d2cb47c.ngrok.io\"\nconst socket = openSocket(endpoint)\n\nconst GameState =  createContext()\nconst GameDispatch = createContext()\n\nconst initialState = {\n    key: [],\n    cards: [],\n    deck: [],\n    blueCards: 0,\n    redCards: 0,\n    turn: ''\n}\n\nconst GameProvider = ({children}) => {\n    const [localState, setLocalState] = useState(initialState)\n    const [view, setView] = useState('agent')\n\n    socket.on('gameState', gameState => setLocalState(gameState))\n    socket.on('newGame', gameState => setLocalState(gameState))\n\n    const flipCard = (word) => {\n        socket.emit('flipCard', word)\n    }\n\n    const startNewGame = () => {\n        socket.emit('startNewGame')\n    }\n\n    const endTurn = () => {\n        socket.emit('endTurn')\n    }\n\n    return (\n        <GameState.Provider value={{ localState, view }}>\n            <GameDispatch.Provider value={{ flipCard, setView, startNewGame, endTurn}}>\n                {children}\n            </GameDispatch.Provider>\n        </GameState.Provider>\n    )\n}\n\nconst useGameState = () => {\n    const context = useContext(GameState)\n    return context\n}\n\nconst useGameDispatch = () => {\n    const context = useContext(GameDispatch)\n    return context\n}\n\nexport default GameProvider\n\nexport {useGameState, useGameDispatch}\n","import React from 'react'\nimport styled from 'styled-components'\nimport {useGameDispatch} from '../gameState'\n\nconst Container = styled.div`\n    display: grid;\n    grid-template-columns: 150px 150px;\n`\nconst StyledButton = styled.button`\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    font-size: 14px;\n    cursor: pointer;\n`\nconst TurnActions = () => {\n    const { startNewGame, endTurn } = useGameDispatch()\n    return(\n        <Container>\n            <StyledButton onClick={() => endTurn()}>End Turn</StyledButton>\n            <StyledButton onClick={() => startNewGame()}>New Game</StyledButton>\n        </Container>\n    )\n}\n\nexport default TurnActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport {useGameState} from '../gameState'\n\nconst Container = styled.div`\n    display: grid;\n    grid-template-columns: 150px 150px;\n\n`\nconst ScoreCard = styled.div`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 50px;\n    padding-left: 24px;\n    background-color: ${({color})=> color};\n    color: white;\n    font-size: 16px;\n`\nconst Scores = ()=> {\n    const {localState} = useGameState()\n    const {blueCards, redCards} = localState\n\n  return (\n  <Container>\n      <ScoreCard color='red'>Red: {redCards}</ScoreCard>\n      <ScoreCard color='blue'>Blue: {blueCards}</ScoreCard>\n  </Container>\n   )\n  }\n\n\nexport default Scores\n","import React from 'react'\nimport styled from 'styled-components'\nimport {useGameState, useGameDispatch} from '../gameState'\n\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 200px 200px 200px;\n`\nconst RoleButton = styled.button`\n    width: 100%;\n    color: ${({ isSelected }) => isSelected ? 'white' : 'black'};\n    background-color: ${({isSelected}) => isSelected ? 'lightslategrey' : 'silver'};\n    cursor: pointer;\n    font-size: 24px;\n    height: 90px;\n    border: ${({ isSelected }) => isSelected ? '4px inset lightslategrey' : '4px groove silver'};\n    outline: 0;\n    font-family: 'Snell Roundhand'\n`\nconst RoleButtons = () => {\n    const {view} = useGameState()\n    const {setView} = useGameDispatch()\n\n    return (\n        <Container>\n            <RoleButton  isSelected={view === 'agent'} onClick={() => setView('agent')}>Agent</RoleButton>\n            <RoleButton isSelected={view === 'spymaster'} onClick={() => setView('spymaster')}>Spymaster</RoleButton>\n            <RoleButton  isSelected={view === 'arbiter'} onClick={() => setView('arbiter')}>Arbiter</RoleButton>\n        </Container>\n    )\n}\n\nexport default RoleButtons\n","import React from 'react'\nimport styled from 'styled-components'\nimport {useGameState, useGameDispatch} from '../gameState'\n\nconst StyledCard = styled.div`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nfont-weight: 20;\ncursor: ${({view}) => view === 'arbiter' ? 'pointer' : 'default'};\ncolor: ${({ card, view }) => card.revealed ? 'white' : view === 'spymaster' ?  `${card.color}` : 'black'};\nbackground-color: ${({card}) => card.revealed ? card.color : `#e0c99b`};\nborder: ${({isSelected, card}) => isSelected ? `8px inset ${card.color}` : `2px solid black` };\n`\nconst Card = ({card}) => {\n    const {view} = useGameState()\n    const {flipCard} = useGameDispatch()\n\n\n    return(\n        <StyledCard\n        card={card}\n        view={view}\n            onClick={()=> view === 'arbiter' && flipCard(card.word)}\n        >\n        {card.word}\n        </StyledCard>\n\n    )\n\n}\n\nexport default Card\n","import React from 'react'\nimport styled from 'styled-components'\nimport Card from './Card'\n\nconst Container = styled.div`\n    display: flex;\n    width: 100%;\n    justify-content: center;\n\n`\nconst Grid = styled.div`\n    margin: 32px;\n    margin-top: 0px;\n    padding: 16px;\n    display: grid;\n    grid-template-rows: repeat(5, 100px);\n    grid-template-columns: repeat(5, 200px);\n    grid-gap: 15px;\n`\n\n\nconst Board = ({cards}) => {\n    const words = []\n    if(cards.length > 0){\n        for (let i = 0; i < 25; i++) {\n            words.push(<Card card={cards[i]} />)\n        }\n    }\n    return (\n    <Container>\n        <Grid>\n            {words}\n        </Grid>\n    </Container>\n    )\n}\n\nexport default Board\n","import React from 'react';\nimport styled from 'styled-components'\nimport TurnActions from './TurnActions'\nimport Scores from './Scores'\nimport RoleButtons from './RoleButtons'\nimport Board from './Board'\nimport  {useGameState, useGameDispatch} from '../gameState'\n\n\n\n\nconst TopBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 92%;\n  margin: 40px 32px 8px 32px;\n  `\n\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\n\nconst App = () => {\n  const {localState} = useGameState()\n\n  const {cards, turn } = localState\n\n\n\nreturn(\n    <Container>\n      <div style = {{display: 'flex', flexDirection: \"column\", alignItems: 'center'}}>\n      <TopBar>\n        <Scores />\n        <div style={{color:turn}}>{turn}'s turn</div>\n        <TurnActions/>\n      </TopBar>\n        {cards && < Board cards={cards} />}\n        <RoleButtons/>\n      </div>\n\n    </Container>\n)\n\n}\n\n\n\nexport default App\n\n\n\n  //\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\nimport GameProvider from './gameState'\n\nReactDOM.render(\n  <GameProvider>\n    <App/>\n  </GameProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}